//–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Telegraf –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –º–æ–¥—É–ª—å telegraf
const { ConsoleMessage } = require('puppeteer');
const { Telegraf, Markup, extra, Context } = require('telegraf');
//–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç –æ–±—ä–µ–∫—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞—Ñ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ê–ü–ò
const config = require('./config');
const recep = require('./rec_dips.json');


function main_menu() {
    return Markup.keyboard([
        ["–ó–∞–≤—Ç—Ä–∞–∫"],
        ["–û–±–µ–¥"],
        ["–£–∂–∏–Ω"]
    ]).resize();
}

function choice() {
    return Markup.keyboard([
        ["–î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    ]).resize();
}

function choice_recep() {
    return Markup.keyboard([
        ["–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    ]).resize();
}

function vern() {
    return Markup.keyboard([
        ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    ]).resize();
}

function raspred() {
    zavt = [];
    obed = [];
    yzin = [];
    for (i = 0; i < recep.length; i++)
        switch (recep[i]['status']) {
            case ('brea'): zavt.push(recep[i])
                break;
            case ('lunch'): obed.push(recep[i])
                break;
            case ('dinn'): yzin.push(recep[i])
                break;
            default: console.log("Chek JSON")
                break;
        }
}

function nach(mas1, cont) {
    vuvod_ing(mas1, 0, cont)
    setTimeout(() => cont.reply('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –±–ª—é–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è", –∞ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–∂–º–∏—Ç–µ "–î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç"', choice()), 1000)
    mas1.splice(0, 1)
}

function drug(mas2, cont) {
    if (mas2.length != 0) {
        sluch = Math.floor(Math.random() * mas2.length)
        vuvod_ing(mas2, sluch, cont)
        mas2.splice(sluch,1)
    }
    else cont.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –º–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(", vern())
}

function vuvod_ing(arr, num, cont1) {
    yes = arr[num].name + '\n\n'
    masing = (String(arr[num].ingredient)).split(",")
    for (i = 0; i < masing.length; i++) {
        yes = yes + '‚úî' + masing[i] + '\n'
    }
    yes = yes + '\n\n–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ:' + arr[num].href
    cont1.replyWithPhoto(arr[num].pic, {
        caption: yes
    })
}

async function found_ingr(vvedingr, cont) {
    vvedingr = String(vvedingr)
    vvedingr = vvedingr.split(", ")
    masit = []
    recep1 = recep
    for (i = 0; i < recep1.length; i++) {
        countsovp = 0
        masingr = []
        masingr = (String(recep1[i]['ingredient'])).split(",")
        for (j = 0; j < masingr.length; j++) {
            for (d = 0; d < vvedingr.length; d++) {
                ime = String(masingr[j])
                ime = ime.toLowerCase()
                nyz = String(vvedingr[d])
                nyz = nyz.toLowerCase()
                if (ime.indexOf(nyz) !== -1)
                    countsovp = countsovp + 1
            }
        }
        if (countsovp == vvedingr.length)
            masit.push(recep1[i]['href'])
    }
    mas_podh_nazv = []
    mas_podh_nazv = found_nazv(vvedingr)
    masit = masit.concat(mas_podh_nazv)
    if (masit.length == 0)
        cont.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤üòû\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    else
        for (i = 0; i < recep1.length; i++) {
            if (recep1[i]['href'] == masit[0]) {
                await vuvod_ing(recep1, i, cont)
                masit.splice(0,1)
                setTimeout(() => cont.reply('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ "–ú–µ–Ω—é", –∞ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–∂–º–∏—Ç–µ "–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç"', choice_recep()), 1000)
                break
            }
        }
    return masit
}

function sled(mas, cont) {
    recep2 = recep
    if (mas.length != 0) {
        for (ic = 0; ic < recep2.length; ic++) {
            if (recep2[ic]['href'] == mas[0]) {
                vuvod_ing(recep2, ic, cont)
                mas.splice(0, 1)
                break
            }
        }
    }
    else cont.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å, –º–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(", vern())
}

function found_nazv(arra) {
    arra = String(arra)
    arra = arra.split(" ")
    itmasnazv = []
    for (i = 0; i < recep.length; i++) {
        countsovp = 0
        masnazv = []
        masnazv = (String(recep[i]['name'])).split(" ")
        for (j = 0; j < masnazv.length; j++) {
            for (d = 0; d < arra.length; d++) {
                ime = String(masnazv[j])
                ime = ime.toLowerCase()
                nyz = String(arra[d])
                nyz = nyz.toLowerCase()
                if (ime.indexOf(nyz) !== -1)
                    countsovp = countsovp + 1
            }
        }
        if (countsovp == arra.length)
            itmasnazv.push(recep[i]['href'])
    }
    return itmasnazv
}

function drugou(no, cont) {
    if (no == "–ó–∞–≤—Ç—Ä–∞–∫") drug(zavt, cont)
    else if (no == "–û–±–µ–¥") drug(obed, cont)
    else if (no == "–£–∂–∏–Ω") drug(yzin, cont)
}

dada = []
const bot = new Telegraf(config.Token);
raspred();
var oredel;
priv = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–Ø –ë–æ—Ç-–ö—É–ª–∏–Ω–∞—Ä –∏ —è:\n‚úî–ü–æ–¥—Å–∫–∞–∂—É –í–∞–º, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏–ª–∏ —É–∂–∏–Ω;\n‚úî–°–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª—é–¥–æ –ø–æ –∏–º–µ—é—â–∏–º—Å—è —É –í–∞—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º;\n‚úî–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞.\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ /help';
bot.start((ctx) => ctx.reply(priv, main_menu()))
bot.help((ctx) => ctx.replyWithHTML(`–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, <i>${ctx.from.first_name}</i>
\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–º–µ–Ω–Ω–æ –¥–ª—è –í–∞—Å. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ—Ü–µ–ø—Ç—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç"
\n–¢–∞–∫–∂–µ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –±–ª—é–¥–∞: –ó–∞–≤—Ç—Ä–∞–∫, –û–±–µ–¥ –∏–ª–∏ –£–∂–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å. –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –í–∞–º –±–ª—é–¥–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
\n–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞, –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É.
\n–ï—Å–ª–∏ –í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –ë–æ—Ç–æ–º –±–ª—é–¥–æ, –Ω–∞–∂–∏–º–∞–π—Ç–µ "–î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –í–∞–º –±–ª—é–¥–æ. –ö–æ–≥–¥–∞ —É –ë–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –º–æ–∂–µ—Ç –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å, –æ–Ω —Å–æ–æ–±—â–∏—Ç  –≤–∞–º –æ–± —ç—Ç–æ–º.`, main_menu()))
bot.on('sticker', (ctx) => ctx.reply('–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä'))
bot.on('voice', (ctx) => ctx.reply('–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'))
bot.on('text', (ctx) => {
    switch (ctx.message.text) {
        case ("–ó–∞–≤—Ç—Ä–∞–∫"): oredel = "–ó–∞–≤—Ç—Ä–∞–∫"; nach(zavt, ctx); break;
        case ("–û–±–µ–¥"): oredel = "–û–±–µ–¥"; nach(obed, ctx); break;
        case ("–£–∂–∏–Ω"): oredel = "–£–∂–∏–Ω"; nach(yzin, ctx); break;
        case ("–í–µ—Ä–Ω—É—Ç—å—Å—è"): ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞ –µ—â–µ —Ä–∞–∑', main_menu()); raspred(); break;
        case ("–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç"): sled(dada, ctx); break;
        case ("–î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç"): drugou(oredel, ctx); break;
        default:
            dada.length = 0;
            dada = found_ingr(ctx.message.text, ctx); break;
    }
}
)
bot.launch();
